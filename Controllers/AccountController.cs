using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using kindergarten.Data;
using kindergarten.Models;

namespace kindergarten.Controllers
{
    public class AccountController : Controller
    {
        private readonly KindergartenContext _context;

        public AccountController(KindergartenContext context)
        {
            _context = context;
        }

        // ========== [GET] LOGIN ==========
        [HttpGet]
        public IActionResult Login()
        {
            if (User.Identity != null && User.Identity.IsAuthenticated)
                return RedirectToAction("RedirectByRole");

            return View(new LoginViewModel());
        }

        // ========== [POST] LOGIN ==========
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(LoginViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            string hashedInput = HashPassword(model.MatKhau);

            var user = await _context.TaiKhoans
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.TenDangNhap == model.TenDangNhap);

            if (user == null)
            {
                ViewBag.Error = "T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i.";
                return View(model);
            }

            if (user.MatKhau != hashedInput)
            {
                ViewBag.Error = "Sai m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i.";
                return View(model);
            }

            if (!user.TrangThai)
            {
                ViewBag.Error = "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a.";
                return View(model);
            }

            // ‚úÖ T·∫°o cookie x√°c th·ª±c
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.TenDangNhap),
                new Claim(ClaimTypes.Role, user.VaiTro ?? ""),
                new Claim("HoTen", user.HoTen ?? "")
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties
            {
                IsPersistent = true,
                ExpiresUtc = DateTimeOffset.UtcNow.AddHours(8)
            };

            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                authProperties
            );

            HttpContext.Session.SetString("VaiTro", user.VaiTro ?? "");
            HttpContext.Session.SetString("TenDangNhap", user.TenDangNhap);

            return RedirectToAction("RedirectByRole");
        }

        // ========== LOGOUT ==========
        [Authorize]
        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            HttpContext.Session.Clear();
            return RedirectToAction("Index", "Home");
        }

        // ========== PH√ÇN QUY·ªÄN & ƒêI·ªÄU H∆Ø·ªöNG ==========
        [Authorize]
        public IActionResult RedirectByRole()
        {
            var role = User.FindFirstValue(ClaimTypes.Role);
            if (string.IsNullOrEmpty(role))
                return RedirectToAction("Login");

            return role switch
            {
                "Admin" => RedirectToAction("Dashboard", "Admin"),
                "PhuHuynh" => RedirectToAction("Index", "PhuHuynh"),
                "GiaoVien" => RedirectToAction("Index", "GiaoVien"),
                "KeToan" => RedirectToAction("Index", "HocPhi"),
                "YTe" => RedirectToAction("Index", "SucKhoe"),
                _ => RedirectToAction("Index", "Home"),
            };
        }

        // ========== ACCESS DENIED ==========
        [HttpGet]
        public IActionResult AccessDenied() => View();

        // ========== H√ÄM HASH M·∫¨T KH·∫®U ==========
        private string HashPassword(string password)
        {
            using (var sha256 = SHA256.Create())
            {
                // ‚ö†Ô∏è D√πng Unicode ƒë·ªÉ kh·ªõp v·ªõi HASHBYTES trong SQL Server
                var bytes = sha256.ComputeHash(Encoding.Unicode.GetBytes(password));
                return BitConverter.ToString(bytes).Replace("-", "").ToLowerInvariant();
            }
        }

        // ========== [GET] REGISTER ==========
        [HttpGet]
        public IActionResult Register()
        {
            return View(new RegisterViewModel());
        }

        // ========== [POST] REGISTER ==========
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Register(RegisterViewModel model)
        {
            if (!ModelState.IsValid)
                return View(model);

            // ‚úÖ Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
            var passwordError = ValidatePasswordStrength(model.MatKhau);
            if (!string.IsNullOrEmpty(passwordError))
            {
                ViewBag.Error = passwordError;
                return View(model);
            }

            // ‚úÖ Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p ho·∫∑c email
            var existingUser = await _context.TaiKhoans
                .AsNoTracking()
                .FirstOrDefaultAsync(u => u.TenDangNhap == model.TenDangNhap || u.Email == model.Email);

            if (existingUser != null)
            {
                ViewBag.Error = "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i.";
                return View(model);
            }

            // ‚úÖ Hash m·∫≠t kh·∫©u
            string hashed = HashPassword(model.MatKhau);

            // ‚úÖ T·∫°o t√†i kho·∫£n m·ªõi (m·∫∑c ƒë·ªãnh l√† PhuHuynh)
            var taiKhoan = new TaiKhoan
            {
                TenDangNhap = model.TenDangNhap,
                MatKhau = hashed,
                Email = model.Email,
                HoTen = model.HoTen,
                VaiTro = "PhuHuynh",
                TrangThai = true,
                NgayTao = DateTime.Now
            };

            try
            {
                _context.TaiKhoans.Add(taiKhoan);
                await _context.SaveChangesAsync();
                Console.WriteLine($"‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng: {taiKhoan.TenDangNhap}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi l∆∞u DB: {ex.Message}");
                ViewBag.Error = "C√≥ l·ªói x·∫£y ra khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.";
                return View(model);
            }

            ViewBag.Success = "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.";
            return RedirectToAction("Login");
        }

        // ‚úÖ H√ÄM KI·ªÇM TRA ƒê·ªò M·∫†NH M·∫¨T KH·∫®U
        private string? ValidatePasswordStrength(string password)
        {
            if (string.IsNullOrWhiteSpace(password))
                return "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";

            if (password.Length < 8)
                return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.";

            if (!password.Any(char.IsUpper))
                return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ in hoa (A-Z).";

            if (!password.Any(char.IsLower))
                return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng (a-z).";

            if (!password.Any(char.IsDigit))
                return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ s·ªë (0-9).";

            if (!password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch)))
                return "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (v√≠ d·ª•: @, #, $, %).";

            return null; // ‚úÖ M·∫≠t kh·∫©u h·ª£p l·ªá
        }
    }
}
